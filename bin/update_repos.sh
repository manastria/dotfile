#!/bin/bash

# ==============================================================================
# Script pour mettre √† jour les d√©p√¥ts Git locaux connect√©s √† GitHub.
#
# Objectif: Parcourir les sous-r√©pertoires, identifier les d√©p√¥ts Git
#           pointant vers un remote GitHub, et ex√©cuter 'git fetch'.
#
# Pr√©requis: La CLI GitHub 'gh' doit √™tre install√©e.
#            (sudo apt install gh) et authentifi√©e ('gh auth login').
# ==============================================================================

# --- Configuration ---
# R√©pertoire contenant vos d√©p√¥ts Git.
# Mettez "." pour le r√©pertoire courant, ou un chemin absolu/relatif.
BASE_DIR="."

# --- Couleurs pour un affichage plus clair ---
COLOR_GREEN=$(tput setaf 2)
COLOR_YELLOW=$(tput setaf 3)
COLOR_BLUE=$(tput setaf 4)
COLOR_RED=$(tput setaf 1)
COLOR_RESET=$(tput sgr0)

# --- D√©but du script ---
echo "${COLOR_BLUE}Lancement de la mise √† jour des d√©p√¥ts Git...${COLOR_RESET}"
echo ""

# 1. V√©rification de l'authentification GitHub
echo "üîÑ V√©rification de l'authentification GitHub..."
if ! gh auth status &> /dev/null; then
    echo "${COLOR_RED}Erreur : Vous n'√™tes pas authentifi√© sur GitHub.${COLOR_RESET}"
    echo "Veuillez ex√©cuter la commande ${COLOR_YELLOW}'gh auth login'${COLOR_RESET} pour vous connecter."
    exit 1
fi
echo "${COLOR_GREEN}Authentification r√©ussie.${COLOR_RESET}"
echo ""

# V√©rifier si le r√©pertoire de base existe
if [ ! -d "$BASE_DIR" ]; then
    echo "${COLOR_RED}Erreur : Le r√©pertoire de base '$BASE_DIR' n'existe pas.${COLOR_RESET}"
    exit 1
fi

# Se d√©placer dans le r√©pertoire de base pour simplifier les chemins
cd "$BASE_DIR" || exit

# 2. Parcours des sous-r√©pertoires
for d in */; do
    # V√©rifier si l'√©l√©ment est bien un r√©pertoire
    if [ ! -d "$d" ]; then
        continue
    fi

    repo_name=${d%/} # Enl√®ve le '/' final pour un affichage propre

    # 3. V√©rifier si c'est un d√©p√¥t Git
    if [ -d "$d.git" ]; then
        # 4. V√©rifier si un remote pointe vers github.com
        #    'git -C "$d"' ex√©cute la commande dans le r√©pertoire $d sans s'y d√©placer
        #    'grep -q' est silencieux et renvoie un statut de succ√®s si le motif est trouv√©
        if git -C "$d" remote -v | grep -q "github.com"; then
            echo "${COLOR_BLUE}Mise √† jour de '$repo_name'...${COLOR_RESET}"
            # 5. Ex√©cution du fetch
            #    --prune supprime les branches locales qui n'existent plus sur le remote
            #    --all r√©cup√®re depuis tous les remotes
            if git -C "$d" fetch --all --prune; then
                echo "${COLOR_GREEN}Succ√®s.${COLOR_RESET}"
            else
                echo "${COLOR_RED}√âchec de la mise √† jour pour '$repo_name'.${COLOR_RESET}"
            fi
        else
            echo "${COLOR_YELLOW}Ignor√© : '$repo_name' n'est pas connect√© √† GitHub (d√©p√¥t local).${COLOR_RESET}"
        fi
    else
        echo "${COLOR_YELLOW}Ignor√© : '$repo_name' n'est pas un d√©p√¥t Git.${COLOR_RESET}"
    fi
    echo "-----------------------------------------------------"
done

echo "${COLOR_GREEN}üéâ Script termin√© ! Tous les d√©p√¥ts GitHub sont √† jour.${COLOR_RESET}"
