[push]
	default = current
[core]
	pager = \"/usr/bin/less\" -FRXKS
	editor = \"/usr/bin/vim\"
    autocrlf = false # Force replacing CRLF line endings with LF
    ignorecase = false

[merge]
  ff = no # Never fast forward merge (I would have just moved the branch pointer manually)

[credential]
	helper = cache --timeout=3600

[pull]
  ff = only # Disable `git pull` from secretly creating merge commits


[alias]
	ap = add -p
	b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"	
	diffw = diff --word-diff
	dl = "!git ll -1"
	dlc = diff --cached HEAD^
	dr = "!f() { git diff "$1"^.."$1"; }; f"
	ds = diff --stat
	la = "!git config -l | grep alias | cut -c 7-"
	lt = describe --tags --abbrev=0
	orphank = !gitk --all --date-order $(git reflog | cut -c1-7)&
	up = pull --rebase --autostash
	verifuser = config --get-regexp 'user.*'

# Alias classique
	a = add
	br = branch
	ci = commit
	cl = clone
	co = checkout
	cp = cherry-pick
	d = diff
	dc = diff --cached
	diff = diff --word-diff
	r = reset
	st = status

# Commits distants
	# Liste des commits à pousser
	out = log --pretty=oneline --abbrev-commit --graph @{u}..
	# Liste des commits à récupérer
	in = !git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}

# Chercher
	# Chercher un fichier dans le dépôt
	f = "!git ls-files | grep -i"

	# Search/grep your entire codebase for a string:
	grep = grep -Ii
	gr = grep -Ii

	# Grep à partir de la racide
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	# Rechercher une chaine de caractères dans tous le dépôt
	find = "!f() { git rev-list --all | xargs git grep $1; }; f";
	
	# Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
	
	# Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"
	
	# Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	
	# Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	
# Rename [branch] to done-[branch]
	done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"


# Assume : remove mark file as unchanged
	# Assume a file as unchanged
	assume = update-index --assume-unchanged
	# Unassume a file
	unassume = update-index --no-assume-unchanged
	# Show assumed files
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	# Unassume all the assumed files
	unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
	# Assume all
	assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

# Reset commands
	r1 = reset HEAD^
	r2 = reset HEAD^^
	rh = reset --hard
	rh1 = reset HEAD^ --hard
	rh2 = reset HEAD^^ --hard

# Stash
	sa = stash apply
	sl = stash list
	ss = stash save

# Historique d'un fichier
	filelog = log -u
	fl = log -u

# Stage
	staged = diff --cached

# commit
	c = commit --verbose
	ca = commit -a --verbose
	cam = commit -a -m
	cm = commit -m
	fix = commit --amend
	m = commit --amend --verbose
	start = ! git init && git commit --allow-empty -m \"Initial commit\"
	tip = log -n 1 --abbrev-commit --decorate
    save = !git add -A && git commit -m 'SAVEPOINT'
    wip = commit -am "WIP"

# statistiques
	auth = shortlog -sne --all
	mmap = "! git log --format='%aN <%aE> %aN <%aE>' --all | sort -u"
	
# branches
	ba = branch --all
	brco = branch --contains
	lb = show-branch --date-order
	# Créer une branche orpheline
	brorph = checkout --orphan
	# Créer une branche
	cob = checkout -b
	
# Logs
	ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
	lde = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative --since '3 weeks ago' --all --date-order
	lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	le = log --oneline --decorate
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	lm = log --merges --oneline
	lmm = log --merges --all --pretty=medium
	lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
	logtree = "log --graph --oneline --decorate"
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	
# Status
	
    ##########
    # Undo
    ##########

    # Undo a `git push`
    undopush = push -f origin HEAD^:master;

    # Undo merge
    undomerge = reset --hard HEAD@{1};

    # Undo changes not commited
    undo = reset --hard;

    # Undo last commit and remove from stage
    # Example
    # git unstage file1 file2 ...
    unstage = reset HEAD -- #file;
	
	
# stash force apply & stash force pop
    sfa = !git stash show -p | git apply
    sfp = !git stash show -p | git apply && git stash drop 
	

    # Clone a repository including all submodules
    cloneall = clone --recursive

    # Where it is?
    url = remote -v;

    ##########
    # Logs and infos
    ##########

    # Who contributed and how much
    who = shortlog -sne;

    # Show last commit
    last = log -1 HEAD;

    # Last tag
    lasttag = describe --tags --abbrev=0;

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --graph --abbrev-commit --pretty=oneline -n 20;

    # View the SHA, description, date, author and history graph
    # Example:
    # * 66a2a64 - comment (20 hours ago) <USER1>
    # *   6a7206f - Merge branch 'develop' into very-cool-feature (21 hours ago) <USER2>
    # |\
    # | * 1748c5f - comment (21 hours ago) <USER2>
    # | * e3a42a1 - comment (21 hours ago) <USER2>
    # * 2667f01 - comment (2 days ago) <USER3>
    # * 7f5722d - comment (2 days ago) <USER1>
    #
    history = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset';

    # View the SHA, description, date, and history graph of my commits
    # Example:
    # * 66a2a64 - comment (20 hours ago) <USER1>
    # *   6a7206f - Merge branch 'develop' into very-cool-feature (21 hours ago) <USER2>
    # |\
    # | * 1748c5f - comment (21 hours ago) <USER2>
    # | * e3a42a1 - comment (21 hours ago) <USER2>
    # * 2667f01 - comment (2 days ago) <USER3>
    # * 7f5722d - comment (2 days ago) <USER1>
    #
    mylog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --author="$(git config USER.name)";

    # List contributors with number of commits
    contributors = shortlog --summary --numbered;

    # Show verbose output about tags
    tags = tag -l




    ##########
    # Status
    ##########

    # View the current working tree status using the short format
    s = status -s;
	
	# Voir tous les fichiers modifié, pas seulement les répertoires
	sall = status -uall;
	
    # Montrer la branche et l’information de suivi
    sts = status -sb

    # Diff
    d = diff --patch-with-stat;

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"




    ##########
    # Commits
    ##########

    # Commit all changes
    ac = !git add . && git add -u && git commit -a;

    # add and commit with message, dont need quotation marks
    # Example:
    # git acm message without quotes
    acm = "!f() { git add . && git commit -m \"$(echo $@)\"; }; f";

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"



    ##########
    # Pull, Push
    ##########

    # pull this branch
    get = !git pull origin $(git rev-parse --abbrev-ref HEAD);

    # Pull in remote changes for the current repository and all its submodules
    pullall = !"git pull origin $(git rev-parse --abbrev-ref HEAD); git submodule foreach git pull origin master"

    # push this branch
    post = !git push origin $(git rev-parse --abbrev-ref HEAD);

    # pull and push this branch
    update = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git s && git pull origin ${BRANCH} && git push origin ${BRANCH}; }; f";




    ##########
    # Deploys
    ##########

    # update develop
    dev-deploy = !git pull origin develop && git push origin develop;

    # update this branch and send to another branch, and return to this branch
    mergeto = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git pull origin ${BRANCH} && git push origin ${BRANCH} && git checkout $1 && git pull origin $1 && git merge ${BRANCH} && git push origin $1 && git checkout ${BRANCH}; }; f";

    # update this branch and send to develop and another branch (release), and return to this branch
    #
    #                 another
    # branch develop  branch
    #      |
    #       \
    #           |
    #            \
    #                  |
    branch-deploy = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git pull origin ${BRANCH} && git push origin ${BRANCH} && git checkout develop && git pull origin develop && git merge ${BRANCH} && git push origin develop && git checkout $1 && git pull origin $1 && git merge develop && git push origin $1 && git checkout ${BRANCH}; }; f";




    ##########
    # Branchs
    ##########

    # create branch local and remote
    create = "!f() { git checkout -B $1 && git push origin $1; }; f";

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # update branchs
    branchs = !git fetch --all && git fetch -p && git branch -a;

    # change to another branch and update
    go = "!f() { git checkout $1 && git pull origin $1; }; f";

    # remove branchs that dont exist on remote
    # (you should be on one existing branch)
    # TODO: 'git remote prune origin' does the same?
    delete-not-on-remote-branches = !git branch -a | egrep -v 'origin|master|develop' | xargs -n1 git branch -d;

    # force remove branchs that dont exist on remote
    # (you should be on one existing branch)
    force-delete-not-on-remote-branches = !git branch -a | egrep -v 'origin|master|develop' | xargs -n1 git branch -D;

    # remove branchs merged on master
    # TODO: dont remove develop if it is sync with master
    delete-merged-branches = !git branch --merged master | grep -v 'master' | xargs -n 1 git branch -d;

    # force remove branchs merged on master
    force-delete-merged-branches = !git branch --merged master | grep -v 'master' | xargs -n 1 git branch -D;

    # Tracking and publishing git branches (usage: `git publish`) 
    current-branch = !git branch | grep '^*' | sed s/\\*\\ //
    track = !git branch --track $(git current-branch) origin/$(git current-branch)
    publish = !git push origin $(git current-branch) && echo $(git track)

    ##########
    # Merge
    ##########

    # merge and use mine
    ours = "!f() { git checkout --ours $@ && git add $@; }; f";

    # merge and use theirs
    theirs = "!f() { git checkout --theirs $@ && git add $@; }; f";


    ##########
    # Alias
    ##########
	# Quote / unquote a sh command, converting it to / from a git alias string
	quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"
	quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"    # Commentaire '

	# List all aliases, only the names
    alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1/' | sort;

    # List all aliases, names and commands
    aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t\\2/' | sort;


	hist = log --graph --decorate --format=format:'%C(red)%h%C(reset) | %C(green)%ad%C(reset) | %C(magenta)%d%C(reset) %C(reset)%s %C(blue)[%aN]%C(reset)' --date=format:'%Y-%m-%d %H:%M:%S'


[include]
    path = ~/.gitconfig.local


# cat gitconfig | sed -e 's/^[ \t]*//' | sed '/^$/d' | grep -v "^#" |sort| less
