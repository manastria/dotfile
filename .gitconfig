[push]
	default = current
[core]
	pager = \"/usr/bin/less\" -FRXKS
	editor = \"/usr/bin/vim\"
    autocrlf = false # Force replacing CRLF line endings with LF
    ignorecase = false

[merge]
  ff = no # Never fast forward merge (I would have just moved the branch pointer manually)

[credential]
	helper = cache --timeout=3600

[pull]
  ff = only # Disable `git pull` from secretly creating merge commits


[alias]
# ====================
# Alias de base
# ====================
a = add
br = branch
ci = commit
cl = clone
co = checkout
cp = cherry-pick
d = diff
dc = diff --cached    # Affiche les changements mis en attente pour le prochain commit
diff = diff --word-diff
r = reset
st = status

# ====================
# Visualisation
# ====================
auth = shortlog -sne --all       # Liste des auteurs et du nombre de commits
b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'" # Liste les branches triées par date de création
ba = branch --all                # Liste toutes les branches locales et distantes
branchs = !git fetch --all && git fetch -p && git branch -a; # Met à jour et liste toutes les branches
contributors = shortlog --summary --numbered  # Liste des contributeurs et nombre de commits
dl = "!git ll -1" # Affiche le dernier commit
hist = log --graph --decorate --format=format:'%C(red)%h%C(reset) | %C(green)%ad%C(reset) | %C(magenta)%d%C(reset) %C(reset)%s %C(blue)[%aN]%C(reset)' --date=format:'%Y-%m-%d %H:%M:%S'; # Affiche l'historique sous forme graphique avec des détails
history = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'    # Historique des commits avec formatage
l = log --graph --abbrev-commit --pretty=oneline -n 20    # 20 derniers commits en forme d'arbre
la = "!git config -l | grep alias | cut -c 7-"
last = log -1 HEAD               # Dernier commit
lasttag = describe --tags --abbrev=0  # Décrit le dernier tag
lb = show-branch --date-order   # Montre les branches avec un ordre basé sur la date
ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative    # Journal des commits avec formatage spécifique
lde = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative --since '3 weeks ago' --all --date-order   # Journal des commits des 3 dernières semaines
lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short  # Journal des commits avec date courte
le = log --oneline --decorate   # Journal des commits en un seul ligne avec décoration
ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat    # Journal détaillé des commits
lm = log --merges --oneline     # Journal des commits de fusion en une seule ligne
lmm = log --merges --all --pretty=medium    # Journal détaillé des commits de fusion
lnc = log --pretty=format:"%h\\ %s\\ [%cn]"    # Journal des commits sans décoration
logtree = log --graph --oneline --decorate   # Affiche l'arbre des commits
ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate  # Journal des commits avec formatage spécifique
mylog = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --author="$(git config USER.name)"   # Journal des commits de l'utilisateur actuel
s = status -s     # Affiche le statut de l'arborescence de travail avec le format court
sall = status -uall   # Affiche tous les fichiers modifiés, pas seulement les répertoires
sl = stash list # Liste tous les "stash" enregistrés
sts = status -sb  # Affiche la branche et les informations de suivi
tags = tag -l                    # Liste tous les tags
tip = log -n 1 --abbrev-commit --decorate # Affiche le dernier commit de manière concise

# ====================
# Différence & Comparaison
# ====================
ap = add -p                # Ajouter des parties spécifiques d'un fichier lors de la mise en scène (staging)
di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"   # Affiche les différences entre l'état "$number" révisions en arrière et l'état actuel
dlc = diff --cached HEAD^  # Montrer les différences entre le dernier commit et l'index (caché)
dr = "!f() { git diff "$1"^.."$1"; }; f"  # Afficher les différences entre un commit spécifié et son parent
ds = diff --stat           # Afficher un résumé statistique des changements entre commits
dstat = diff --patch-with-stat   # Affiche les différences avec des statistiques
dwork = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"   # Affiche les différences entre le dernier commit et l'état actuel
mmap = "! git log --format='%aN <%aE> %aN <%aE>' --all | sort -u"    # Cartographie des auteurs et emails


# ====================
# Commits
# ====================
ac = !git add . && git add -u && git commit -a    # Ajoute et valide tous les changements
acm = "!f() { git add . && git commit -m \"$(echo $@)\"; }; f"   # Ajoute et valide avec un message, sans besoin de guillemets
amend = commit --amend --reuse-message=HEAD  # Modifie le dernier commit avec les fichiers actuellement indexés
c = commit --verbose # Crée un commit en affichant les détails
ca = commit -a --verbose # Crée un commit pour tous les changements, avec détails
cam = commit -a -m # Crée un commit pour tous les changements avec un message spécifique
cm = commit -m # Crée un commit avec un message spécifique
m = commit --amend --verbose # Modifie le dernier commit avec détails TODO: comparer avec amend
reb = "!r() { git rebase -i HEAD~$1; }; r"   # Réorganise interactivement les "$number" derniers commits
save = !git add -A && git commit -m 'SAVEPOINT' # Ajoute tous les changements et crée un commit avec le message "SAVEPOINT"
start = ! git init && git commit --allow-empty -m "Initial commit" # Initialise un nouveau dépôt avec un commit vide initial
undo = git reset --soft HEAD~1   # Annule le dernier commit tout en conservant les changements
wip = commit -am "WIP" # Crée un commit avec le message "WIP" pour tous les changements


# ====================
# Commits distants
# ====================
branch-deploy = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git pull origin ${BRANCH} && git push origin ${BRANCH} && git checkout develop && git pull origin develop && git merge ${BRANCH} && git push origin develop && git checkout $1 && git pull origin $1 && git merge develop && git push origin $1 && git checkout ${BRANCH}; }; f"; # Déployer la branche actuelle vers develop, puis vers une autre branche
dev-deploy = !git pull origin develop && git push origin develop   # Met à jour la branche develop
get = !git pull origin $(git rev-parse --abbrev-ref HEAD)  # Récupère les modifications de cette branche depuis le dépôt distant
in = !git fetch && git log --pretty=oneline --abbrev-commit --graph ..@{u}  # Liste des commits à récupérer
mergeto = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git pull origin ${BRANCH} && git push origin ${BRANCH} && git checkout $1 && git pull origin $1 && git merge ${BRANCH} && git push origin $1 && git checkout ${BRANCH}; }; f"  # Fusionne la branche actuelle dans une autre branche et la met à jour
out = log --pretty=oneline --abbrev-commit --graph @{u}..  # Liste des commits à pousser
post = !git push origin $(git rev-parse --abbrev-ref HEAD)  # Pousse les modifications de cette branche vers le dépôt distant
update = "!f() { BRANCH=$(git rev-parse --abbrev-ref HEAD); git s && git pull origin ${BRANCH} && git push origin ${BRANCH}; }; f"   # Récupère et pousse les modifications de cette branche
url = remote -v                  # Affiche les URLs des dépôts distants

# ====================
# Recherche
# ====================
f = "!git ls-files | grep -i"  # Chercher un fichier dans le dépôt
grep = grep -Ii
gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"  # Grep à partir de la racide
find = "!f() { git rev-list --all | xargs git grep $1; }; f"  # Rechercher une chaine de caractères dans tous le dépôt
fb = "!f() { git branch -a --contains $1; }; f"  # Find branches containing commit
ft = "!f() { git describe --always --contains $1; }; f"  # Find tags containing commit
fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"  # Find commits by source code
fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"  # Find commits by commit message
orphank = !gitk --all --date-order $(git reflog | cut -c1-7)& # Ouvre gitk pour visualiser tous les commits, y compris ceux orphelins
filelog = log -u # Affiche l'historique complet d'un fichier
brco = branch --contains         # Trouve les branches contenant un commit donné
who = shortlog -sne              # Liste des auteurs et du nombre de commits


# ====================
# Renommage
# ====================
done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"  # Rename [branch] to done-[branch]
mvrbranch = "!moveit() { git branch -m $1 $2; git push origin :$1; git push --set-upstream origin $2; }; moveit"  # Rename branch local and push
mvbranch  = "!moveit() { git branch -m $1; }; moveit"  # Rename branch local
brorph = checkout --orphan       # Crée une nouvelle branche orpheline
cob = checkout -b                # Crée et bascule vers une nouvelle branche

# ====================
# Fusion
# ====================
ours = "!f() { git checkout --ours $@ && git add $@; }; f"  # merge and use mine
theirs = "!f() { git checkout --theirs $@ && git add $@; }; f"  # merge and use theirs
up = pull --rebase --autostash # Récupère les derniers commits et applique les modifications locales par-dessus


# ====================
# Configuration & alias
# ====================
verifuser = config --get-regexp 'user.*'  # Vérifier le nom d'utilisateur
quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #"  # Quote a command
quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #"  # Unquote a command
alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1/' | sort  # List all alias names
aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t\\2/' | sort  # List all aliases, names and commands
la = "!git config -l | grep alias | cut -c 7-" # Liste tous les alias configurés
verifuser = config --get-regexp 'user.*' # Vérifie les configurations d'utilisateur (nom et email)

# ====================
# Ajout & Préparation
# ====================
ap = add -p # Ajoute des changements interactivement
staged = diff --cached # Affiche les changements mis en attente pour le prochain commit
sfa = !git stash show -p | git apply   # Applique les changements du dernier stash sans le supprimer
sfp = !git stash show -p | git apply && git stash drop   # Applique et supprime le dernier stash

# ====================
# Réinitialisation
# ====================
r1 = reset HEAD^ # Annule le dernier commit tout en conservant les changements
r2 = reset HEAD^^ # Annule les deux derniers commits tout en conservant les changements
rh = reset --hard # Réinitialise complètement au dernier commit
rh1 = reset HEAD^ --hard # Réinitialise complètement et supprime le dernier commit
rh2 = reset HEAD^^ --hard # Réinitialise complètement et supprime les deux derniers commits
undopush = push -f origin HEAD^:master; # Annule le dernier push (soyez prudent avec cette commande)
undomerge = reset --hard HEAD@{1};  # Annule le dernier merge
undo2 = reset --hard;                # Réinitialise complètement au dernier commit
unstage = reset HEAD -- #file;      # Désindexe un fichier

# ====================
# Stash (Mise de côté)
# ====================
sa = stash apply # Applique les changements mis de côté
ss = stash save # Met de côté les changements en cours

# ====================
# Gestion des fichiers "Assumed unchanged"
# ====================
assume = update-index --assume-unchanged # Marque un fichier comme inchangé pour Git
unassume = update-index --no-assume-unchanged # Retire la marque "inchangé" d'un fichier pour Git
assumed = "!git ls-files -v | grep ^h | cut -c 3-" # Liste tous les fichiers marqués comme "inchangés"
unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged" # Retire la marque "inchangé" pour tous les fichiers
assumeall = "!git st -s | awk {'print $2'} | xargs git assume" # Marque tous les fichiers du statut comme "inchangés" pour Git
setx = update-index --chmod=+x; # Marque un fichier comme exécutable
unsetx = update-index --chmod=-x; # Marque un fichier comme non exécutable

# ====================
# Gestion des branches
# ====================
create = "!f() { git checkout -B $1 && git push origin $1; }; f"; # Crée une nouvelle branche locale et distante
go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f" # Passe à une branche, la créant si nécessaire
go = "!f() { git checkout $1 && git pull origin $1; }; f"; # Change pour une autre branche et la met à jour
delete-not-on-remote-branches = !git branch -a | egrep -v 'origin|master|develop' | xargs -n1 git branch -d; # Supprime les branches locales non présentes sur le dépôt distant
force-delete-not-on-remote-branches = !git branch -a | egrep -v 'origin|master|develop' | xargs -n1 git branch -D; # Supprime de force les branches locales non présentes sur le dépôt distant
delete-merged-branches = !git branch --merged master | grep -v 'master' | xargs -n 1 git branch -d; # Supprime les branches fusionnées dans master
force-delete-merged-branches = !git branch --merged master | grep -v 'master' | xargs -n 1 git branch -D; # Supprime de force les branches fusionnées dans master
current-branch = !git branch | grep '^*' | sed s/\\*\\ //; # Affiche la branche actuelle
track = !git branch --track $(git current-branch) origin/$(git current-branch); # Crée un suivi pour la branche actuelle avec le dépôt distant correspondant
publish = !git push origin $(git current-branch) && echo $(git track); # Publie la branche actuelle et configure le suivi

# ====================
# Configuration & alias
# ====================
quote-string = "!read -r l; printf \\\"!; printf %s \"$l\" | sed 's/\\([\\\"]\\)/\\\\\\1/g'; printf \" #\\\"\\n\" #" # Convertit une commande sh en chaîne pour un alias git
quote-string-undo = "!read -r l; printf %s \"$l\" | sed 's/\\\\\\([\\\"]\\)/\\1/g'; printf \"\\n\" #" # Convertit une chaîne d'alias git en commande sh
alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1/' | sort; # Liste uniquement les noms des alias
aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t\\2/' | sort; # Liste les noms et commandes des alias


# ====================
# Sous modules
# ====================
pullall = !"git pull origin $(git rev-parse --abbrev-ref HEAD); git submodule foreach git pull origin master"  # Récupère les modifications à distance pour le dépôt courant et tous ses sous-modules
cloneall = clone --recursive     # Clone un dépôt et ses sous-modules
update-subs = submodule update --remote # Met à jour les sous-modules
addsub = "!f() { git submodule add $1 $2; git commit -m \"Add $2 submodule\"; }; f"  # Ajoute un sous-module

[include]
    path = ~/.gitconfig.local


# cat gitconfig | sed -e 's/^[ \t]*//' | sed '/^$/d' | grep -v "^#" |sort| less
