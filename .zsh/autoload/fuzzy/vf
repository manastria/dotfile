# Use fuzzy (fzf) search to find a file and open it in Vim
#
# Usage:
#   vf [fuzzy pattern]
#
# Flow:
# 1. try locate as it's fastest in most cases
# 2. try mdfind
#    it doesn't need updatedb but cannot search 'dot' folders/files
# 3. try fzf
#    it's 3rd because if my CWD is too shallow (~, /, ...), it will be too slow;
#    plus I want to be able to find files regardless of my CWD
#
# An INT signal will cancel the current search and try the following one

local -a files

setopt local_traps
# files is actually empty after ^C. TODO: figure out why?
TRAPINT() { files=130 }

# usage: ffind {locate|mdfind} $@
ffind() {
   if (($# > 1))
   then
      files=(${(0)"$($1 -0 / | grep -zv '/\.\(git\|svn\|hg\)\(/\|$\)\|~$' | fzf --read0 -0 -1 -m -q"$*[2,-1]" --print0 || echo $pipestatus[3])"})
   else
      files=(${(0)"$($1 -0 / | grep -zv '/\.\(git\|svn\|hg\)\(/\|$\)\|~$' | fzf --read0 -0 -1 -m --print0 || echo $pipestatus[3])"})
   fi
}

# 1. try locate
ffind locate $@

# 2. try mdfind
# note: (( )) can throw a division by 0 error with paths (because of /)
if [[ -z $files || $files == 130 || $files == 1 ]]
then
   # ignore dot files
   if [[ $(uname) == Darwin && "$*" != .* && "$*" != *\ .* ]]
   then
      print -P '%F{yellow}trying mdfind%f...'
      ffind mdfind $@
   fi
fi

# 3. try fzf
if [[ -z $files || $files == 130 || $files == 1 ]]
then
   print -P '%F{yellow}trying fzf%f...'
   if (($#))
   then
      files=(${(0)"$(fzf -0 -1 -m -q"$*" --print0)"})
   else
      files=(${(0)"$(fzf -0 -1 -m --print0)"})
   fi
fi

if [[ -n $files && $files != 130 && $files != 1 ]]
then
   # locate/mdfind could've found directories! TODO: fix?
   v -- $files
fi

# TODO: unsetopt local_traps?
